# Install Mariadb10.x
sudo dnf install -y mariadb105-server
sudo systemctl start mariadb
sudo systemctl enable mariadb
sudo systemctl status mariadb


# Edit Parameter File
sudo vi /etc/my.cnf.d/mariadb-server.cnf
server-id = 2  
expire_logs_days=2
binlog_format = ROW 
max_binlog_size = 1G 
log-bin =mariadb-bin
binlog_row_image=FULL
binlog_checksum=NONE
log_slave_updates=TRUE
log-bin-index =mariadb-bin.index
# gtid_mode = ON
# enforce_gtid_consistency = ON
# bind-address = 0.0.0.0

sudo systemctl stop mariadb
sudo systemctl start mariadb

sudo su
mysql
# Create Admin and Replication Users
CREATE USER 'admin_user'@'%' IDENTIFIED BY 'admin_password';
GRANT ALL PRIVILEGES ON *.* TO 'admin_user'@'%' WITH GRANT OPTION;
FLUSH PRIVILEGES;


# Install Perl modules required by pt-online-schema-change
sudo yum install -y perl-English perl-Time-HiRes perl-Digest-MD5 perl-FindBin perl-sigtrap perl-DBD-MySQL

wget https://www.percona.com/downloads/percona-toolkit/3.5.7/binary/tarball/percona-toolkit-3.5.7_x86_64.tar.gz
tar -xzvf percona-toolkit-3.5.7_x86_64.tar.gz
export PATH=$PATH:~/percona-toolkit-3.5.7/bin:.

sudo dnf install -y git
wget https://github.com/datacharmer/test_db.git
unzip test_db-master.zip
cd test_db-master/
sudo su
mysql -t < employees.sql

wget https://downloads.mysql.com/docs/sakila-db.zip
unzip sakila-db.zip
cd sakila-db/
sudo su 
mysql -t < sakila-schema.sql
mysql -t < sakila-data.sql

SELECT tc.constraint_schema,tc.constraint_name,tc.table_name,tc.constraint_type,kcu.table_name,kcu.column_name,kcu.referenced_table_name,kcu.referenced_column_name,rc.update_rule,rc.delete_rule
FROM information_schema.table_constraints tc
inner JOIN information_schema.key_column_usage kcu
ON tc.constraint_catalog = kcu.constraint_catalog
AND tc.constraint_schema = kcu.constraint_schema
AND tc.constraint_name = kcu.constraint_name
AND tc.table_name = kcu.table_name
LEFT JOIN information_schema.referential_constraints rc
ON tc.constraint_catalog = rc.constraint_catalog
AND tc.constraint_schema = rc.constraint_schema
AND tc.constraint_name = rc.constraint_name
AND tc.table_name = rc.table_name
WHERE tc.constraint_schema = 'sample' ;

CREATE TABLE customer (
  id INT NOT NULL AUTO_INCREMENT,
  firstname varchar(50) NOT NULL,
  lastname varchar(50) NOT NULL,
  PRIMARY KEY (id)
) ENGINE=INNODB;

CREATE TABLE contact (
  id INT,
  customer_id INT,
  info varchar(50) NOT NULL,
  type varchar(50) NOT NULL,
) ENGINE=INNODB;

INSERT INTO customer (firstname, lastname) VALUES
('Elaine', 'Stevens'),
('Mary', 'Dittman'),
('Skip', 'Stevenson');

export DB_HOST=35.163.206.156
export DB_USERNAME=admin_user
export DB_PASSWORD=admin_password
pt-online-schema-change h=$DB_HOST,u=$DB_USERNAME,p=$DB_PASSWORD,D=employees,t=employees --critical-load Threads_running=100 --max-load Threads_running=15 --alter "MODIFY emp_no bigint (20) unsigned" --tries swap_tables:50:5 --set-vars wait_timeout=43200,lock_wait_timeout=1800 --execute
pt-online-schema-change h=$DB_HOST,u=$DB_USERNAME,p=$DB_PASSWORD,D=employees,t=employees --critical-load Threads_running=100 --max-load Threads_running=15 --alter "MODIFY emp_no bigint (20) unsigned" --tries swap_tables:50:5 --set-vars wait_timeout=43200,lock_wait_timeout=1800 --execute --alter-foreign-keys-method=auto
pt-online-schema-change h=$DB_HOST,u=$DB_USERNAME,p=$DB_PASSWORD,D=employees,t=employees --critical-load Threads_running=100 --max-load Threads_running=15 --alter "ADD COLUMN uuid_col CHAR(36) AFTER emp_no, DROP PRIMARY KEY, ADD PRIMARY KEY (uuid_col), MODIFY uuid_col CHAR(36) NOT NULL" --tries swap_tables:50:5 --set-vars wait_timeout=43200,lock_wait_timeout=1800 --execute --alter-foreign-keys-method=auto

pt-online-schema-change h=$DB_HOST,u=$DB_USERNAME,p=$DB_PASSWORD,D=sakila,t=actor --critical-load Threads_running=100 --max-load Threads_running=15 --alter "ADD COLUMN UUID BINARY(16) NOT NULL DEFAULT UUID(), DROP PRIMARY KEY, ADD PRIMARY KEY (UUID)" --tries swap_tables:50:5 --set-vars wait_timeout=43200,lock_wait_timeout=1800 --execute --alter-foreign-keys-method=auto --no-check-unique-key-change --no-check-alte

pt-online-schema-change h=$DB_HOST,u=$DB_USERNAME,p=$DB_PASSWORD,D=sakila,t=actor --critical-load Threads_running=100 --max-load Threads_running=15 --alter "MODIFY actor_id bigint (20) unsigned" --tries swap_tables:50:5 --set-vars wait_timeout=43200,lock_wait_timeout=1800 --execute  --alter-foreign-keys-method=auto

time pt-online-schema-change \
h=$DB_HOST,\
u=$DB_USERNAME,\
p=$DB_PASSWORD,\
D=sakila,t=actor \
--max-lag=100 \
--critical-load Threads_running=100 \
--max-load Threads_running=15 \
--nocheck-replication-filters \
--alter "MODIFY actor_id bigint (20) unsigned" \
--tries swap_tables:50:5 \
--set-vars wait_timeout=43200,lock_wait_timeout=1800 \
--alter-foreign-keys-method=drop_swap \
--execute
pt-online-schema-change --alter "engine='InnoDB'" h=$DB_HOST,D=sakila,t=actor --ask-pass --progress time,10 --print --nocheck-replication-filters 
--recursion-method=none --set-vars="SQL_LOG_BIN=OFF" --max-load "Threads_connected=900" --alter-foreign-keys-method=drop_swap --execute



time pt-online-schema-change h=$DB_HOST,u=$DB_USERNAME,p=$DB_PASSWORD,D=sakila,t=actor --max-lag=100 --critical-load Threads_running=100 --max-load Threads_running=15 --nocheck-replication-filters --alter "MODIFY actor_id bigint (20) unsigned" --tries swap_tables:50:5 --set-vars wait_timeout=43200,lock_wait_timeout=1800 --alter-foreign-keys-method=rebuild_constraints --plugin=/home/ec2-user/sakila-db/ptosc_plugin_drop_fk.pl





-- Filim

ALTER TABLE film ADD COLUMN UUID_film_id varchar(36) NOT NULL DEFAULT (UUID());

ALTER TABLE film_actor ADD COLUMN UUID_film_id  varchar(36) ;
ALTER TABLE film_category ADD COLUMN UUID_film_id  varchar(36) ;
ALTER TABLE inventory ADD COLUMN UUID_film_id  varchar(36) ;

UPDATE film_actor AS fa
JOIN film AS a ON fa.film_id = a.film_id
SET fa. UUID_film_id  = a. UUID_film_id ;

UPDATE film_category AS fa
JOIN film AS a ON fa.film_id = a.film_id
SET fa. UUID_film_id  = a. UUID_film_id ;

UPDATE inventory AS fa
JOIN film AS a ON fa.film_id = a.film_id
SET fa. UUID_film_id  = a. UUID_film_id ;

-- Actor

ALTER TABLE actor ADD COLUMN UUID_actor_id varchar(36) NOT NULL DEFAULT (UUID());
ALTER TABLE film_actor ADD COLUMN UUID_actor_id  varchar(36) ;

UPDATE film_actor AS fa
JOIN actor AS a ON fa.actor_id = a.actor_id
SET fa. UUID_actor_id  = a. UUID_actor_id ;

-- Address
ALTER TABLE address ADD COLUMN UUID_address_id varchar(36) NOT NULL DEFAULT (UUID());
ALTER TABLE store ADD COLUMN UUID_address_id  varchar(36) ;
ALTER TABLE customer ADD COLUMN UUID_address_id  varchar(36) ;
ALTER TABLE staff ADD COLUMN UUID_address_id  varchar(36) ;

UPDATE store AS fa
JOIN address AS a ON fa.address_id = a.address_id
SET fa. UUID_address_id  = a. UUID_address_id ;

UPDATE customer AS fa
JOIN address AS a ON fa.address_id = a.address_id
SET fa. UUID_address_id  = a. UUID_address_id ;

UPDATE staff AS fa
JOIN address AS a ON fa.address_id = a.address_id
SET fa. UUID_address_id  = a. UUID_address_id ;

-- category

ALTER TABLE category ADD COLUMN UUID_category_id varchar(36) NOT NULL DEFAULT (UUID());
ALTER TABLE film_category ADD COLUMN UUID_category_id  varchar(36) ;

UPDATE film_category AS fa
JOIN category AS a ON fa.category_id = a.category_id
SET fa. UUID_category_id  = a. UUID_category_id ;

-- City

ALTER TABLE city ADD COLUMN UUID_city_id varchar(36) NOT NULL DEFAULT (UUID());
ALTER TABLE address ADD COLUMN UUID_city_id  varchar(36) ;

UPDATE address AS fa
JOIN address AS a ON fa.city_id = a.city_id
SET fa. UUID_city_id  = a. UUID_city_id ;


-- country

ALTER TABLE country ADD COLUMN UUID_country_id varchar(36) NOT NULL DEFAULT (UUID());
ALTER TABLE city ADD COLUMN UUID_country_id  varchar(36) ;

UPDATE city AS fa
JOIN country AS a ON fa.country_id = a.country_id
SET fa.UUID_country_id  = a UUID_country_id ;

-- customer

ALTER TABLE customer ADD COLUMN UUID_customer_id varchar(36) NOT NULL DEFAULT (UUID());
ALTER TABLE rental ADD COLUMN UUID_customer_id  varchar(36) ;
ALTER TABLE payment ADD COLUMN UUID_customer_id  varchar(36) ;


UPDATE rental AS fa
JOIN customer AS a ON fa.customer_id  = a.customer_id 
SET fa. UUID_customer_id  = a. UUID_customer_id ;

UPDATE payment AS fa
JOIN customer AS a ON fa.customer_id  = a.customer_id 
SET fa.UUID_customer_id  = a.UUID_customer_id ;


-- inventory
ALTER TABLE inventory ADD COLUMN UUID_inventory_id varchar(36) NOT NULL DEFAULT (UUID());
ALTER TABLE rental ADD COLUMN UUID_inventory_id  varchar(36) ;

UPDATE rental AS fa
JOIN inventory AS a ON fa.inventory_id   = a.inventory_id  
SET fa.UUID_inventory_id  = a.UUID_inventory_id ;


-- language
ALTER TABLE language ADD COLUMN UUID_language_id varchar(36) NOT NULL DEFAULT (UUID());
ALTER TABLE film ADD COLUMN UUID_language_id  varchar(36) ;

UPDATE film AS fa
JOIN language AS a ON fa.language_id   = a.language_id
SET fa.UUID_language_id  = a.UUID_language_id ;

####
ALTER TABLE language ADD COLUMN UUID_language_id varchar(36) NOT NULL DEFAULT (UUID());
ALTER TABLE film ADD COLUMN UUID_language_id  varchar(36) ;

UPDATE film AS fa
JOIN language AS a ON fa.language_id   = a.language_id
SET fa. UUID_language_id  = a. UUID_language_id ;
####

-- rental
ALTER TABLE rental ADD COLUMN UUID_rental_id varchar(36) NOT NULL DEFAULT (UUID());
ALTER TABLE payment ADD COLUMN UUID_rental_id  varchar(36) ;

UPDATE payment AS fa
JOIN rental AS a ON fa.rental_id  = a.rental_id
SET fa.UUID_rental_id  = a.UUID_rental_id ;


-- staff

ALTER TABLE staff ADD COLUMN UUID_staff_id varchar(36) NOT NULL DEFAULT (UUID());
ALTER TABLE rental ADD COLUMN UUID_staff_id  varchar(36) ;
ALTER TABLE payment ADD COLUMN UUID_staff_id  varchar(36) ;
ALTER TABLE store ADD COLUMN UUID_staff_id  varchar(36) ;

UPDATE rental AS fa
JOIN staff AS a ON fa.staff_id  = a.staff_id
SET fa.UUID_staff_id  = a.UUID_staff_id ;

UPDATE payment AS fa
JOIN staff AS a ON fa.staff_id  = a.staff_id
SET fa.UUID_staff_id  = a.UUID_staff_id ;

########
UPDATE store AS fa
JOIN staff AS a ON fa.staff_id  = a.manager_staff_id
SET fa.UUID_staff_id  = a.UUID_staff_id ;
######

-- store
ALTER TABLE store ADD COLUMN UUID_store_id varchar(36) NOT NULL DEFAULT (UUID());
ALTER TABLE inventory ADD COLUMN UUID_store_id  varchar(36) ;
ALTER TABLE customer ADD COLUMN UUID_store_id  varchar(36) ;
ALTER TABLE staff ADD COLUMN UUID_store_id  varchar(36) ;

UPDATE inventory AS fa
JOIN store AS a ON fa.store_id  = a.store_id
SET fa.UUID_store_id  = a.UUID_store_id ;

UPDATE customer AS fa
JOIN store AS a ON fa.store_id  = a.store_id
SET fa.UUID_store_id  = a.UUID_store_id ;


UPDATE staff AS fa
JOIN store AS a ON fa.store_id  = a.store_id
SET fa.UUID_store_id  = a.UUID_store_id ;


ALTER TABLE `actor`
ADD CONSTRAINT `PK_actor_id` PRIMARY KEY (`actor_id`);


ALTER TABLE `film_actor`
ADD CONSTRAINT `FK_film_actor_actor_id`
FOREIGN KEY (`actor_id`)
REFERENCES `actor` (`actor_id`);


ALTER TABLE `film_actor`
ADD CONSTRAINT `PK_film_actor` PRIMARY KEY (`actor_id`, `film_id`);


ALTER TABLE `film_actor`
ADD CONSTRAINT `FK_film_actor_actor`
FOREIGN KEY (`actor_id`)
REFERENCES `actor` (`actor_id`)
ON UPDATE CASCADE;

ALTER TABLE `film_actor`
ADD CONSTRAINT `FK_film_actor_film`
FOREIGN KEY (`film_id`)
REFERENCES `film` (`film_id`)
ON UPDATE CASCADE;

==============================================================


select * from film_actor where UUID is null;

-- Drop the foreign key constraint
ALTER TABLE film_actor DROP FOREIGN KEY fk_film_actor_actor;

-- Modify the column
ALTER TABLE actor modify COLUMN actor_id smallint(5);

ALTER TABLE actor drop PRIMARY KEY;

alter table actor change UUID_actor_id actor_id;

alter table film_actor change UUID_actor_id actor_id;


ALTER TABLE actor ADD PRIMARY KEY (UUID);

ALTER TABLE actor drop COLUMN actor_id;

-- Recreate the foreign key constraint
ALTER TABLE film_actor ADD CONSTRAINT fk_film_actor_actor FOREIGN KEY (UUID) REFERENCES actor(UUID);


--ALTER TABLE film_actor modify COLUMN UUID varchar(36) NOT NULL DEFAULT (UUID());


=======================


ALTER TABLE film_actor DROP FOREIGN KEY fk_film_actor_actor;

ALTER TABLE actor modify COLUMN actor_id smallint(5);

ALTER TABLE actor drop PRIMARY KEY;
ALTER TABLE film_actor drop PRIMARY KEY;

alter table actor drop column actor_id;
alter table film_actor drop column actor_id;


alter table actor change uuid_actor_id actor_id varchar(36) NOT NULL DEFAULT (UUID());

alter table film_actor change uuid_actor_id actor_id varchar(36) NOT NULL;

ALTER TABLE `actor`
ADD CONSTRAINT `PK_actor_id` PRIMARY KEY (`actor_id`);


ALTER TABLE `film_actor`
ADD CONSTRAINT `FK_film_actor_actor_id`
FOREIGN KEY (`actor_id`)
REFERENCES `actor` (`actor_id`);



============
-- Add UUID column to actor table
ALTER TABLE actor ADD COLUMN UUID VARCHAR(36) NOT NULL DEFAULT (UUID());

-- Add UUID column to film_actor table
ALTER TABLE film_actor ADD COLUMN UUID VARCHAR(36);

-- Update film_actor UUIDs based on actor table
UPDATE film_actor AS fa
JOIN actor AS a ON fa.actor_id = a.actor_id
SET fa.UUID = a.UUID;

-- Add primary key to actor table using UUID column
ALTER TABLE actor ADD PRIMARY KEY (UUID);

-- Drop actor_id column from actor table
ALTER TABLE actor DROP COLUMN actor_id;

-- Drop foreign key constraint
ALTER TABLE film_actor DROP FOREIGN KEY fk_film_actor_actor;

-- Add foreign key constraint using UUID column
ALTER TABLE film_actor ADD CONSTRAINT fk_film_actor_actor FOREIGN KEY (UUID) REFERENCES actor(UUID);




